class Solution {
    int directions[][] = {{0 , -1} , {-1 , 0} , {1 , 0} , {0 , 1}};
    public void dfs(int i , int j , boolean[][] visited , int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        visited[i][j] = true;
        for(int dir[] : directions) {
            int x = i + dir[0];
            int y = j + dir[1];
            if(x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1 && !visited[x][y]) {
                dfs(x , y , visited , grid);
            }
        }

    }
    public int numEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if((i == 0 || j == 0 || i == m - 1 || j == n - 1) && grid[i][j] == 1 && !visited[i][j]) {
                    dfs(i , j , visited , grid);
                }
            }
        }
        int count = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1 && !visited[i][j])
                    count++;
            }
        }
        return count;
    }
}
